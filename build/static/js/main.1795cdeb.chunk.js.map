{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","width","height","latitude","longitude","zoom","viewport","setViewport","selectedPark","setSelectedPark","useEffect","listener","e","key","window","addEventListener","removeEventListener","mapboxApiAccessToken","process","REACT_APP_MAPBOX_ACCESS_TOKEN","mapStyle","onViewportChange","parkData","map","park","geometry","coordinates","className","onClick","preventDefault","src","alt","properties","PARK_ID","onClose","NAME","DESCRIPTION","ADDRESS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uv7BA2EeA,MApEf,WACE,MAAgCC,mBAAS,CACvCC,MAAO,QACPC,OAAQ,QACRC,SAAU,QACVC,WAAa,QACbC,KAAM,IALR,mBAAOC,EAAP,KAAiBC,EAAjB,KAQA,EAAwCP,mBAAS,MAAjD,mBAAOQ,EAAP,KAAqBC,EAArB,KAeA,OAbAC,qBAAU,WACR,IAAMC,EAAW,SAAAC,GACD,WAAVA,EAAEC,KACJJ,EAAgB,OAKpB,OAFAK,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,MAEvC,IAGD,8BACA,eAAC,IAAD,2BACIL,GADJ,IAEAW,qBAAsBC,mIAAYC,8BACjCC,SAAS,kCACVC,iBAAkB,SAAAf,GAAQ,OAAIC,EAAYD,IAJ1C,UAOCgB,IAAkBC,KAAI,SAAAC,GAAI,OACzB,cAAC,IAAD,CACArB,SAAUqB,EAAKC,SAASC,YAAY,GACpCtB,UAAWoB,EAAKC,SAASC,YAAY,GAFrC,SAIE,wBAASC,UAAU,aACbC,QAAS,SAAAhB,GACPA,EAAEiB,iBACFpB,EAAgBe,IAHxB,SAKE,qBAAKM,IAAI,kBAAkBC,IAAI,uBATtBP,EAAKQ,WAAWC,YAclCzB,EACS,cAAC,IAAD,CACEL,SAAUK,EAAaiB,SAASC,YAAY,GAC5CtB,UAAWI,EAAaiB,SAASC,YAAY,GAC7CQ,QAAS,WACPzB,EAAgB,OAJpB,SAOE,gCACE,6BAAKD,EAAawB,WAAWG,OAC7B,4BAAI3B,EAAawB,WAAWI,cAC5B,4BAAI5B,EAAawB,WAAWK,eAG9B,YCzDGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1795cdeb.chunk.js","sourcesContent":["import  React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport ReactMapGL, {Marker, Popup} from 'react-map-gl';\r\nimport * as parkData from \"./data/skateboard-parks.json\"\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [viewport, setViewport] = useState({\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n    latitude: 45.4211,\r\n    longitude:  -75.6903,\r\n    zoom: 8\r\n  });\r\n\r\n  const [selectedPark, setSelectedPark] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const listener = e => {\r\n      if (e.key === \"Escape\") {\r\n        setSelectedPark(null);\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", listener);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", listener);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n    <ReactMapGL\r\n    {...viewport}\r\n    mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\r\n     mapStyle=\"mapbox://styles/mapbox/dark-v10\"\r\n    onViewportChange={viewport => setViewport(viewport)}\r\n    >\r\n  \r\n    {parkData.features.map(park => (\r\n      <Marker key={park.properties.PARK_ID}\r\n      latitude={park.geometry.coordinates[1]}  \r\n      longitude={park.geometry.coordinates[0]}\r\n      >\r\n        <button  className=\"marker-btn\"\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                setSelectedPark(park);\r\n              }}>\r\n          <img src=\"/skateboard.png\" alt=\"Skate park icon\"/>\r\n        </button>\r\n      </Marker>\r\n    ))}\r\n\r\n{selectedPark ? (\r\n          <Popup\r\n            latitude={selectedPark.geometry.coordinates[1]}\r\n            longitude={selectedPark.geometry.coordinates[0]}\r\n            onClose={() => {\r\n              setSelectedPark(null);\r\n            }}\r\n          >\r\n            <div>\r\n              <h2>{selectedPark.properties.NAME}</h2>\r\n              <p>{selectedPark.properties.DESCRIPTION}</p>\r\n              <p>{selectedPark.properties.ADDRESS}</p>\r\n            </div>\r\n          </Popup>\r\n        ) : null}\r\n    </ReactMapGL>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}